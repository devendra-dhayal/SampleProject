{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Product","Container","component","maxWidth","Paper","CssBaseline","Card","className","BestPriceView","classes","useStyles","card","Typography","cashback","variant","price","amount","DateForm","form","noValidate","Select","labelId","id","value","margin","required","fullWidth","autoComplete","MenuItem","Button","type","color","submit","Grid","container","item","xs","makeStyles","theme","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","spacing","display","flexDirection","padding","borderBottom","fontSize","width","backgroundImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAae,SAASA,IACtB,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACpC,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,MACE,kBAACC,EAAD,MACA,yBAAKC,UAAU,WACf,kBAACC,EAAD,QAMR,SAASF,IACL,IAAMG,EAAUC,IAEhB,OACI,yBAAKH,UAAWE,EAAQE,MACpB,kBAACC,EAAA,EAAD,CAAYL,UAAWE,EAAQI,SAAUX,UAAU,KAAKY,QAAQ,MAAhE,oBACiB,kBAAC,IAAD,CAAiBP,UAAU,mBAG5C,kBAACK,EAAA,EAAD,CAAYL,UAAWE,EAAQM,MAAOb,UAAU,KAAKY,QAAQ,MAA7D,QACK,6BACL,0BAAMP,UAAWE,EAAQO,QAAzB,eAGA,kBAACC,EAAD,OAKZ,SAASA,IACL,IAAMR,EAAUC,IAEhB,OACI,0BAAMH,UAAWE,EAAQS,KAAMC,YAAU,GAEvC,kBAACC,EAAA,EAAD,CACAC,QAAQ,kCACRC,GAAG,4BACHC,MAAM,OACNT,QAAQ,WACRU,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTC,aAAa,oBAEZ,kBAACC,EAAA,EAAD,CAAUL,MAAM,QAAhB,iBACA,kBAACK,EAAA,EAAD,CAAUL,MAAM,SAAhB,UACA,kBAACK,EAAA,EAAD,CAAUL,MAAM,SAAhB,UACA,kBAACK,EAAA,EAAD,CAAUL,MAAM,SAAhB,WAGD,kBAACM,EAAA,EAAD,CACEC,KAAK,SACLJ,WAAS,EACTZ,QAAQ,YACRiB,MAAM,UACNxB,UAAWE,EAAQuB,QALrB,uBAaV,SAASxB,IACL,OACQ,kBAACyB,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM1B,UAAU,cAAc4B,MAAI,EAACC,IAAE,GAArC,4BAKhB,IAAM1B,EAAY2B,aAAW,SAACC,GAAD,MAAY,CACrCvB,MAAM,CAAEwB,WAAY,OACXC,cAAe,OACfC,WAAY,OACZC,YAAa,OACbX,MAAM,WAEjBpB,KAAM,CACJgC,UAAWL,EAAMM,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,QAAQ,YAEVlC,SAAS,CAAE0B,WAAY,OACZC,cAAe,OACfQ,aAAc,oBACdP,WAAY,OACZC,YAAa,OACbX,MAAM,UACNkB,SAAU,QAErBjC,OAAO,CAACe,MAAM,QACdb,KAAM,CACJgC,MAAO,OACPP,UAAWL,EAAMM,QAAQ,IAE3BZ,OAAQ,CACNR,OAAQc,EAAMM,QAAQ,EAAG,EAAG,GAC5BO,gBAAiB,8CACjBF,SAAU,UCzGMG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0377d22c.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport './App.css';\n\nexport default function Product() {\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n     <Paper>\n      <CssBaseline />\n        <Card />\n        <div className=\"dashed\"></div>\n        <BestPriceView />\n     </Paper> \n    </Container>\n  );\n}\n\nfunction Card() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.card}>\n            <Typography className={classes.cashback} component=\"h1\" variant=\"h5\">\n            Upto 5% Cashback <HelpOutlineIcon className=\"question_icon\" />\n            </Typography>\n\n            <Typography className={classes.price} component=\"h1\" variant=\"h5\">\n            from <br />\n            <span className={classes.amount}>&euro; 139</span>\n            </Typography>\n\n            <DateForm />\n        </div>\n    );\n}\n\nfunction DateForm() {\n    const classes = useStyles();\n\n    return(\n        <form className={classes.form} noValidate>\n          \n          <Select\n          labelId=\"demo-simple-select-filled-label\"\n          id=\"demo-simple-select-filled\"\n          value=\"none\"\n          variant=\"outlined\"\n          margin=\"normal\"\n          required\n          fullWidth\n          autoComplete=\"current-password\"\n          >\n           <MenuItem value=\"none\">Select a date</MenuItem>\n           <MenuItem value=\"date1\">Date 1</MenuItem>\n           <MenuItem value=\"date2\">Date 2</MenuItem>\n           <MenuItem value=\"date3\">Date 3</MenuItem>\n        </Select>\n         \n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n           CHECK AVAILABILITY\n          </Button>\n        </form>\n    );\n}\n\nfunction BestPriceView() {\n    return (\n            <Grid container>\n                <Grid className=\"footer_text\" item xs> BEST PRICE GUARANTEED </Grid>\n            </Grid>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    price:{ paddingTop: '15px',\n             paddingBottom: '15px',\n             marginLeft: '10px',\n             marginRight: '10px',\n             color:'#6b6b6b'\n           },\n  card: {\n    marginTop: theme.spacing(2),\n    display: 'flex',\n    flexDirection: 'column',\n    padding:'8px 16px'\n  },\n  cashback:{ paddingTop: '10px',\n             paddingBottom: '10px',\n             borderBottom: '1px solid #ececec',\n             marginLeft: '10px',\n             marginRight: '10px',\n             color:'#6b6b6b',\n             fontSize: '15px'\n           },\n  amount:{color:'#000'},         \n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n    backgroundImage: 'linear-gradient(to right, #FF6186, #F4144A)',\n    fontSize: '16'\n  },\n}));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}